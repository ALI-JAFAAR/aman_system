{
    "conflicts": [
        {
            "id": "3d51d8f9-db35-48d1-847d-cd3f4f93ebaf",
            "currentContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse Livewire\\Component;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse App\\Models\\Organization;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Filament\\Forms\\Components\\RichEditor;\nuse Illuminate\\Database\\Eloquent\\SoftDeletingScope;\nuse App\\Filament\\Resources\\Panel\\OrganizationResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\OrganizationResource\\RelationManagers;\n\nclass OrganizationResource extends Resource\n{\n    protected static ?string $model = Organization::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n\n    protected static ?int $navigationSort = 1;\n\n    protected static ?string $navigationGroup = 'Admin';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.organizations.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.organizations.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.organizations.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    TextInput::make('name')\n                        ->label(__('crud.organizations.inputs.name.label'))\n                        ->required()\n                        ->string()\n                        ->autofocus(),\n\n                    Select::make('type')\n                        ->label(__('crud.organizations.inputs.type.label'))\n                        ->required()\n                        ->searchable()\n                        ->preload()\n                        ->native(false)\n                        ->options([\n                            'general_union'           => 'اتحاد عام',\n                            'sub_union'               => 'اتحاد فرعي',\n                            'trade_union'             => 'نقابة',\n                            'government_institution'  => 'مؤسسة حكومية / منفذ',\n                            'insurance_company'       => 'شركة تأمين',\n                            'law_firm'                => 'مكتب محاماة',\n                            'platform'                => 'منصة أمان',\n                        ]),\n\n                    RichEditor::make('details')\n                        ->label(__('crud.organizations.inputs.details.label'))\n                        ->required()\n                        ->string()\n                        ->fileAttachmentsVisibility('public'),\n\n                    Select::make('organization_id')\n                        ->label('Organization')\n                        ->nullable(\n                            fn(string $context): bool => $context === 'create'\n                        )\n                        ->dehydrated(fn($state) => filled($state))\n                        ->relationship('organization', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    TextInput::make('code')\n                        ->label(__('crud.organizations.inputs.code.label'))\n                        ->required()\n                        ->string()\n                        ->unique('organizations', 'code', ignoreRecord: true),\n                ]),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->poll('60s')\n            ->columns([\n                TextColumn::make('name')->label(\n                    __('crud.organizations.inputs.name.label')\n                ),\n\n                TextColumn::make('type')->label(\n                    __('crud.organizations.inputs.type.label')\n                ),\n\n                TextColumn::make('details')\n                    ->label(__('crud.organizations.inputs.details.label'))\n                    ->limit(255),\n\n                TextColumn::make('organization.name')->label('Organization'),\n\n                TextColumn::make('code')->label(\n                    __('crud.organizations.inputs.code.label')\n                ),\n            ])\n            ->filters([Tables\\Filters\\TrashedFilter::make()])\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n                Tables\\Actions\\ViewAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n\n                    Tables\\Actions\\ForceDeleteBulkAction::make(),\n                    Tables\\Actions\\RestoreBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('id', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListOrganizations::route('/'),\n            'create' => Pages\\CreateOrganization::route('/create'),\n            'view' => Pages\\ViewOrganization::route('/{record}'),\n            'edit' => Pages\\EditOrganization::route('/{record}/edit'),\n        ];\n    }\n\n    public static function getEloquentQuery(): Builder\n    {\n        return parent::getEloquentQuery()->withoutGlobalScopes([\n            SoftDeletingScope::class,\n        ]);\n    }\n}\n",
            "newContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse Livewire\\Component;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse App\\Models\\Organization;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Filament\\Forms\\Components\\RichEditor;\nuse Illuminate\\Database\\Eloquent\\SoftDeletingScope;\nuse App\\Filament\\Resources\\Panel\\OrganizationResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\OrganizationResource\\RelationManagers;\n\nclass OrganizationResource extends Resource\n{\n    protected static ?string $model = Organization::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n\n    protected static ?int $navigationSort = 1;\n\n    protected static ?string $navigationGroup = 'Admin';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.organizations.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.organizations.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.organizations.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    TextInput::make('name')\n                        ->label(__('crud.organizations.inputs.name.label'))\n                        ->required()\n                        ->string()\n                        ->autofocus(),\n\n                    Select::make('type')\n                        ->label(__('crud.organizations.inputs.type.label'))\n                        ->required()\n                        ->searchable()\n                        ->preload()\n                        ->native(false)\n                        ->options([\n                            'government_institution' =>\n                                'Government institution',\n                            'insurance_company' => 'Insurance company',\n                            'law_firm' => 'Law firm',\n                            'trade_union' => 'Trade union',\n                            'sub_union' => 'Sub union',\n                            'general_union' => 'General union',\n                            'platform' => 'Platform',\n                        ]),\n\n                    RichEditor::make('details')\n                        ->label(__('crud.organizations.inputs.details.label'))\n                        ->required()\n                        ->string()\n                        ->fileAttachmentsVisibility('public'),\n\n                    Select::make('organization_id')\n                        ->label('Organization')\n                        ->nullable(\n                            fn(string $context): bool => $context === 'create'\n                        )\n                        ->dehydrated(fn($state) => filled($state))\n                        ->relationship('organization', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    TextInput::make('code')\n                        ->label(__('crud.organizations.inputs.code.label'))\n                        ->required()\n                        ->string()\n                        ->unique('organizations', 'code', ignoreRecord: true),\n                ]),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->poll('60s')\n            ->columns([\n                TextColumn::make('name')->label(\n                    __('crud.organizations.inputs.name.label')\n                ),\n\n                TextColumn::make('type')->label(\n                    __('crud.organizations.inputs.type.label')\n                ),\n\n                TextColumn::make('details')\n                    ->label(__('crud.organizations.inputs.details.label'))\n                    ->limit(255),\n\n                TextColumn::make('organization.name')->label('Organization'),\n\n                TextColumn::make('code')->label(\n                    __('crud.organizations.inputs.code.label')\n                ),\n            ])\n            ->filters([Tables\\Filters\\TrashedFilter::make()])\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n                Tables\\Actions\\ViewAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n\n                    Tables\\Actions\\ForceDeleteBulkAction::make(),\n                    Tables\\Actions\\RestoreBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('id', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListOrganizations::route('/'),\n            'create' => Pages\\CreateOrganization::route('/create'),\n            'view' => Pages\\ViewOrganization::route('/{record}'),\n            'edit' => Pages\\EditOrganization::route('/{record}/edit'),\n        ];\n    }\n\n    public static function getEloquentQuery(): Builder\n    {\n        return parent::getEloquentQuery()->withoutGlobalScopes([\n            SoftDeletingScope::class,\n        ]);\n    }\n}\n"
        }
    ]
}